CardinalityTest -> // TODO: May we find another way to describe cardinality rather than this, or the onProperty maybe?

Package: tests.ontologies.time
TestClass -> [owl property] = [shacl properties generated]; level can be either NodeShape, EmbeddedProperty, ProeprtyShape
CardinalityTest -> owl:cardinality = sh:minCount & sh:maxCount; EmbeddedProperty
CardinalityTest -> owl:minCardinality = sh:minCount; EmbeddedProperty
CardinalityTest -> owl:maxCardinality = sh:maxCount; EmbeddedProperty
FilledInformationTest -> owl:hasValue = sh:hasValue; EmbeddedProperty
AnnotationPropertiesTest -> rdfs:label = sh:name & rdfs:label; NodeShape, PropertyShape s
AnnotationPropertiesTest -> rdfs:comment = sh:description (only for PropertyShapes) & rdfs:label; NodeShape, PropertyShapes
AnnotationPropertiesTest -> rdfs:seeAlso = rdfs:seeAlso; NodeShape, PropertyShapes
AnnotationPropertiesTest -> rdfs:isDefinedBy = rdfs:isDefinedBy; NodeShape, PropertyShapes
PropertyCharacteristicsTest -> a owl:FunctionalProperty = sh:maxCount 1; PropertyShape, PropertyShapes
RDFSchemaFeaturesTest -> a owl:Class = a sh:NodeShape; NodeShape
RDFSchemaFeaturesTest -> a rdfs:Class = a sh:NodeShape; NodeShape
RDFSchemaFeaturesTest -> a owl:DatatypeProperty = a sh:PropertyShape; PropertyShape
RDFSchemaFeaturesTest -> a owl:ObjectProperty = a sh:PropertyShape; PropertyShape
RDFSchemaFeaturesTest -> a rdf:Property = a sh:PropertyShape; PropertyShape (tested for both data properties and object properties)
RDFSchemaFeaturesTest -> rdfs:range = sh:class; PropertyShape (coming from owl:ObjectProperties)
RDFSchemaFeaturesTest -> rdfs:range = sh:datatype; PropertyShape (coming from owl:DatatypedProperties)
TODO: RDFSchemaFeaturesTest -> rdfs:range = sh:node; PropertyShape ( coming from rdf:Property) -> aqui el problema es distinguir cuando un rdf:Property va a ser un DP o un OP)
PropertyRestrictionsTest -> owl:onProperty = sh:path; EmbeddedProperty
PropertyRestrictionsTest -> owl:allValuesFrom = sh:class & sh:datatype; EmbeddedProperty
EquialityTest -> owl:equivalentProperty = sh:equivalent; PropertyShape (no generamos esto para EmbeddedProperties, no se si tendriamos)
PropertyCharacteristicsTest -> a owl:InverseFunctionalProperty= sh:maxCount 1 & sh:inversePath; PropertyShape, Embedded?

Package: test.owl.shapes
CardinalityConstraintTest -> sh:minCount & sh:maxCount
LogicalConstraintsTest -> sh:and
OtherConstraints -> sh:hasValue
OtherConstraints -> sh:in
PropertyPairConstraintTest -> sh:equals FALLA
PropertyPairConstraintTest -> sh:disjoint FALLA
StringBasedConstraintTest -> sh:pattern FALLA
StringBasedConstraintTest -> sh:languageRange FALLA
StringBasedConstraintTest -> sh:minLength FALLA
StringBasedConstraintTest -> sh:maxLength FALLA
ValueTypeContraintTest -> sh:class
ValueTypeContraintTest -> sh:datatype
ValueTypeContraintTest -> sh:nodeKind

